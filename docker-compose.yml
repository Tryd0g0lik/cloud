services:
  db:
    container_name: cloud_db
    image: postgres:alpine
#    environment:
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      # ограничиваем процессор место занимаемо на сервере для db
      resources:
        limits:
          # ограничения
          cpus: '0.5'
          memory: 1G
    networks:
      - backend
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cloud"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  pgadmin:
    container_name: app_pgadmin
    image: dpage/pgadmin4:7.8
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - backend
  cloud:
    container_name: app_cloud
    build:
      context: .
      dockerfile: Dockerfile
    image: app_cloud:cloud_image
    env_file:
      - .env
    working_dir: /app
    command:
      - bash
      - -c
      - |
        python3 manage.py collectstatic --noinput
        python3 manage.py makemigrations
        python3 manage.py migrate
        gunicorn -b 0.0.0.0:8000 project.wsgi:application
    ports:
      - "8000:8000"
#    environment:
#      - DATABASE_URL=postgresql://postgres:123@db:5432/lybrary # Замените на ваши данные
    volumes:
      - ./cloud_user/static:/app/cloud_user/static
      - ./templates/users:/app/templates/users
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
      - frontend
  nginx:
    container_name: app_nginx
#    build:
#      context: docker/nginx
#      dockerfile: Dockerfile
    image: app_nginx:nginx_image
    ports:
      - "80:80"
    volumes:
      - ./cloud_user/static:/app/cloud_user/static
      - ./templates/users:/app/templates/users
    depends_on:
      - cloud
    restart: on-failure
    networks:
      - frontend

volumes:
  # 'pgdata:' просто оставляем место по умолчанию
#  pgdata:
  # использовать внешний том volume, не создаем новый, рассчитываем на существующий
  postgres_data:
    external: true

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge